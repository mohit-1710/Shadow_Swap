import type { NextApiRequest, NextApiResponse } from 'next';
import { promises as fs } from 'fs';
import path from 'path';

/**
 * Serves the latest ShadowSwap IDL generated by Anchor without committing it to the repo.
 *
 * Dev defaults pull from the workspace build output; override with SHADOWSWAP_IDL_PATH.
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    res.setHeader('Allow', 'GET');
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const candidates = Array.from(
    new Set(
      [
        process.env.SHADOWSWAP_IDL_PATH,
        path.resolve(process.cwd(), '../anchor_program/target/idl/shadow_swap.json'),
        path.resolve(process.cwd(), '../../anchor_program/target/idl/shadow_swap.json'),
      ].filter((value): value is string => Boolean(value))
    )
  );

  for (const candidate of candidates) {
    try {
      const idlPath = path.isAbsolute(candidate)
        ? candidate
        : path.resolve(process.cwd(), candidate);

      const idlJson = await fs.readFile(idlPath, 'utf8');

      res.setHeader('Content-Type', 'application/json');
      return res.status(200).send(idlJson);
    } catch (error) {
      // Try next candidate; continue loop.
    }
  }

  return res.status(404).json({
    error:
      'ShadowSwap IDL not found. Run "yarn anchor:build" and/or set SHADOWSWAP_IDL_PATH to a valid shadow_swap.json.',
    checked: candidates,
  });
}
